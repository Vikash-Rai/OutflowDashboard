{"version":3,"file":"static/js/6163.7e446173.chunk.js","mappings":"gbAoBe,SAASA,EAAT,GAAoD,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,WAC5CC,GAAeC,EAAAA,EAAAA,KAEfC,EAAsBC,EAAAA,KAAaC,MAAM,CAC7CC,MAAOF,EAAAA,KAAaE,MAAM,uCAAuCC,SAAS,uBAGtEC,GAAUC,EAAAA,EAAAA,IAAQ,CACtBC,UAAUC,EAAAA,EAAAA,GAAYR,GACtBS,cAAe,CAAEN,MAAO,sBAIxBO,EAEEL,EAFFK,aACaC,EACXN,EADFO,UAAaD,aAGTE,EAAQ,mCAAG,WAAOC,GAAP,0FAEP,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAAS,QAFtC,OAGTlB,EAAaoB,UACftB,IACAC,EAAWiB,EAAKX,QALL,+CAQbgB,QAAQC,MAAR,MARa,wDAAH,sDAYd,OACE,SAAC,KAAD,CAAcf,QAASA,EAASQ,SAAUH,EAAaG,GAAvD,UACE,UAACQ,EAAA,EAAD,CAAOC,QAAS,EAAhB,WACE,SAAC,KAAD,CAAcC,KAAK,QAAQC,MAAM,mBAEjC,SAACC,EAAA,EAAD,CAAeC,WAAS,EAACC,KAAK,QAAQC,KAAK,SAASC,QAAQ,YAAYC,QAASnB,EAAjF,iC,eCpCFoB,GAAYC,EAAAA,EAAAA,IAAO,MAAPA,EAAc,kBAAgB,CAC9CC,QAAS,OACTC,UAAW,OACXC,WAAY,SACZC,eAAgB,SAChBC,QAL8B,EAAGC,MAKlBhB,QAAQ,GAAI,OAKd,SAASiB,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOrC,EAAP,KAAcsC,EAAd,KACA,GAAwBD,EAAAA,EAAAA,WAAS,GAAjC,eAAOE,EAAP,KAAaC,EAAb,KAEA,OACE,SAACC,EAAA,EAAD,CAAMC,MAAM,iBAAiBC,GAAI,CAAEC,OAAQ,GAA3C,UACE,UAAChB,EAAD,YACE,SAACiB,EAAA,EAAD,KAEA,SAACC,EAAA,EAAD,WACE,SAACC,EAAA,EAAD,CAAKJ,GAAI,CAAEK,SAAU,IAAKC,GAAI,QAA9B,SACIV,GAiBA,UAACQ,EAAA,EAAD,CAAKJ,GAAI,CAAEO,UAAW,UAAtB,WACE,SAAC,KAAD,CAAUP,GAAI,CAAEQ,GAAI,EAAGF,GAAI,OAAQL,OAAQ,QAE3C,SAACQ,EAAA,EAAD,CAAY1B,QAAQ,KAAK2B,cAAY,EAArC,wCAGA,UAACD,EAAA,EAAD,wDAEE,4BAASpD,KACT,kBAHF,+BAOA,SAACsD,EAAA,EAAD,CAAQ9B,KAAK,QAAQE,QAAQ,YAAY6B,UAAWC,EAAAA,GAAYC,GAAIC,EAAAA,GAAAA,MAAiBf,GAAI,CAAEgB,GAAI,GAA/F,sBA7BF,iCACE,SAACP,EAAA,EAAD,CAAY1B,QAAQ,KAAKkC,WAAS,EAAlC,oCAGA,SAACR,EAAA,EAAD,CAAYT,GAAI,CAAEkB,MAAO,iBAAkBV,GAAI,GAA/C,+HAKA,SAAC3D,EAAD,CAAmBC,OAAQ,kBAAM+C,GAAQ,IAAO9C,WAAY,SAACoE,GAAD,OAAWxB,EAASwB,OAEhF,SAACR,EAAA,EAAD,CAAQ/B,WAAS,EAACC,KAAK,QAAQ+B,UAAWC,EAAAA,GAAYC,GAAIC,EAAAA,GAAAA,MAAiBf,GAAI,CAAEgB,GAAI,GAArF","sources":["sections/auth/reset-password/ResetPasswordForm.js","pages/auth/ResetPassword.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport * as Yup from 'yup';\n// form\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\n// @mui\nimport { Stack } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n// hooks\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\n// components\nimport { FormProvider, RHFTextField } from '../../../components/hook-form';\n\n// ----------------------------------------------------------------------\n\nResetPasswordForm.propTypes = {\n  onSent: PropTypes.func,\n  onGetEmail: PropTypes.func,\n};\n\nexport default function ResetPasswordForm({ onSent, onGetEmail }) {\n  const isMountedRef = useIsMountedRef();\n\n  const ResetPasswordSchema = Yup.object().shape({\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n  });\n\n  const methods = useForm({\n    resolver: yupResolver(ResetPasswordSchema),\n    defaultValues: { email: 'demo@minimals.cc' },\n  });\n\n  const {\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const onSubmit = async (data) => {\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      if (isMountedRef.current) {\n        onSent();\n        onGetEmail(data.email);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={3}>\n        <RHFTextField name=\"email\" label=\"Email address\" />\n\n        <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n          Reset Password\n        </LoadingButton>\n      </Stack>\n    </FormProvider>\n  );\n}\n","import { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n// @mui\nimport { styled } from '@mui/material/styles';\nimport { Box, Button, Container, Typography } from '@mui/material';\n// layouts\nimport LogoOnlyLayout from '../../layouts/LogoOnlyLayout';\n// routes\nimport { PATH_AUTH } from '../../routes/paths';\n// components\nimport Page from '../../components/Page';\n// sections\nimport { ResetPasswordForm } from '../../sections/auth/reset-password';\n// assets\nimport { SentIcon } from '../../assets';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  display: 'flex',\n  minHeight: '100%',\n  alignItems: 'center',\n  justifyContent: 'center',\n  padding: theme.spacing(12, 0),\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function ResetPassword() {\n  const [email, setEmail] = useState('');\n  const [sent, setSent] = useState(false);\n\n  return (\n    <Page title=\"Reset Password\" sx={{ height: 1 }}>\n      <RootStyle>\n        <LogoOnlyLayout />\n\n        <Container>\n          <Box sx={{ maxWidth: 480, mx: 'auto' }}>\n            {!sent ? (\n              <>\n                <Typography variant=\"h3\" paragraph>\n                  Forgot your password?\n                </Typography>\n                <Typography sx={{ color: 'text.secondary', mb: 5 }}>\n                  Please enter the email address associated with your account and We will email you a link to reset your\n                  password.\n                </Typography>\n\n                <ResetPasswordForm onSent={() => setSent(true)} onGetEmail={(value) => setEmail(value)} />\n\n                <Button fullWidth size=\"large\" component={RouterLink} to={PATH_AUTH.login} sx={{ mt: 1 }}>\n                  Back\n                </Button>\n              </>\n            ) : (\n              <Box sx={{ textAlign: 'center' }}>\n                <SentIcon sx={{ mb: 5, mx: 'auto', height: 160 }} />\n\n                <Typography variant=\"h3\" gutterBottom>\n                  Request sent successfully\n                </Typography>\n                <Typography>\n                  We have sent a confirmation email to &nbsp;\n                  <strong>{email}</strong>\n                  <br />\n                  Please check your email.\n                </Typography>\n\n                <Button size=\"large\" variant=\"contained\" component={RouterLink} to={PATH_AUTH.login} sx={{ mt: 5 }}>\n                  Back\n                </Button>\n              </Box>\n            )}\n          </Box>\n        </Container>\n      </RootStyle>\n    </Page>\n  );\n}\n"],"names":["ResetPasswordForm","onSent","onGetEmail","isMountedRef","useIsMountedRef","ResetPasswordSchema","Yup","shape","email","required","methods","useForm","resolver","yupResolver","defaultValues","handleSubmit","isSubmitting","formState","onSubmit","data","Promise","resolve","setTimeout","current","console","error","Stack","spacing","name","label","LoadingButton","fullWidth","size","type","variant","loading","RootStyle","styled","display","minHeight","alignItems","justifyContent","padding","theme","ResetPassword","useState","setEmail","sent","setSent","Page","title","sx","height","LogoOnlyLayout","Container","Box","maxWidth","mx","textAlign","mb","Typography","gutterBottom","Button","component","RouterLink","to","PATH_AUTH","mt","paragraph","color","value"],"sourceRoot":""}